"""
DNA file parser for 23andMe and Ancestry raw data files.
Extracts SNP data while keeping all processing local.
"""

import re
from pathlib import Path
from dataclasses import dataclass
from typing import List, Dict, Optional


@dataclass
class SNP:
    """Represents a single nucleotide polymorphism."""
    rsid: str
    chromosome: str
    position: int
    genotype: str

    def __repr__(self):
        return f"SNP({self.rsid}, chr{self.chromosome}:{self.position}, {self.genotype})"


class DNAParser:
    """Parse 23andMe or Ancestry raw DNA files."""

    def __init__(self, filepath: str):
        """Initialize parser with DNA file path."""
        self.filepath = Path(filepath)
        self.snps: List[SNP] = []
        self.metadata: Dict[str, str] = {}

    def parse(self) -> List[SNP]:
        """
        Parse DNA file and extract SNPs.

        Returns:
            List of SNP objects extracted from the file.
        """
        if not self.filepath.exists():
            raise FileNotFoundError(f"DNA file not found: {self.filepath}")

        with open(self.filepath, 'r', encoding='utf-8') as f:
            self._extract_metadata(f)
            self._extract_snps(f)

        return self.snps

    def _extract_metadata(self, file_obj) -> None:
        """Extract header metadata from DNA file."""
        file_obj.seek(0)
        for line in file_obj:
            if line.startswith('#'):
                # Extract metadata from comment lines
                if 'generated by' in line.lower():
                    self.metadata['source'] = line.strip('# ').strip()
                elif '23andMe' in line:
                    self.metadata['format'] = '23andMe'
                elif 'Ancestry' in line:
                    self.metadata['format'] = 'Ancestry'
            else:
                # Stop at header line
                break

    def _extract_snps(self, file_obj) -> None:
        """Extract SNP data from file efficiently."""
        file_obj.seek(0)

        # Skip header comments and find data start
        for line in file_obj:
            if not line.startswith('#') and not line.startswith('rsid'):
                # This is the first data line, process it and continue
                break

        # Process all remaining lines as SNP data
        snp_count = 0
        for line in file_obj:
            line = line.strip()
            if not line:
                continue

            try:
                parts = line.split('\t')
                if len(parts) < 4:
                    continue

                rsid, chromosome, position, genotype = parts[0], parts[1], parts[2], parts[3]

                # Skip unmapped SNPs
                if chromosome in ('MT', 'Unknown', 'PAR'):
                    continue

                # Skip if position is not a number
                try:
                    position = int(position)
                except (ValueError, TypeError):
                    continue

                # Skip if genotype is missing or invalid
                if not genotype or genotype == '--':
                    continue

                # Create SNP object
                snp = SNP(
                    rsid=rsid,
                    chromosome=chromosome,
                    position=position,
                    genotype=genotype
                )
                self.snps.append(snp)
                snp_count += 1

                # Progress indicator every 100k SNPs
                if snp_count % 100000 == 0:
                    print(f"  ... parsed {snp_count} SNPs")

            except (ValueError, IndexError, AttributeError):
                # Skip malformed lines silently
                continue

        print(f"âœ“ Parsed {len(self.snps)} SNPs from {self.filepath.name}")

    def get_snps_by_rsid(self, rsids: List[str]) -> Dict[str, SNP]:
        """
        Get specific SNPs by rsID.

        Args:
            rsids: List of rsIDs to retrieve

        Returns:
            Dictionary of rsID -> SNP
        """
        snp_dict = {snp.rsid: snp for snp in self.snps}
        return {rsid: snp_dict[rsid] for rsid in rsids if rsid in snp_dict}

    def get_stats(self) -> Dict[str, any]:
        """Get basic statistics about parsed DNA data."""
        if not self.snps:
            return {}

        chromosomes = set(snp.chromosome for snp in self.snps)

        return {
            'total_snps': len(self.snps),
            'chromosomes_covered': len(chromosomes),
            'source': self.metadata.get('source', 'Unknown'),
            'format': self.metadata.get('format', 'Unknown')
        }


if __name__ == "__main__":
    # Test the parser
    test_file = Path(__file__).parent / "source" / "genome_Sean_O_Reilly_v3_Full_20170428141907.txt"

    parser = DNAParser(str(test_file))
    snps = parser.parse()

    print("\nDNA File Statistics:")
    stats = parser.get_stats()
    for key, value in stats.items():
        print(f"  {key}: {value}")

    print("\nSample SNPs:")
    for snp in snps[:5]:
        print(f"  {snp}")
