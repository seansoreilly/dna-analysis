{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Implement Local DNA File Parser",
        "description": "Develop a module to parse raw DNA files from 23andMe and Ancestry, extracting key SNP data while ensuring all processing happens locally on the user's machine.",
        "details": "The parser must handle standard tab-delimited formats for both 23andMe and Ancestry files. It needs to extract the rsID, genotype, chromosome, and position for each SNP. Implement validation to check for correct file format and data completeness. Crucially, this entire process must run in the user's browser or local environment, with no raw DNA data being uploaded.",
        "testStrategy": "Test with sample valid and malformed files from both 23andMe and Ancestry. Verify that SNP data is extracted correctly into a structured format. Ensure that appropriate errors are thrown for invalid or incomplete files. Use browser developer tools to confirm no raw data is sent over the network during parsing.",
        "priority": "high",
        "dependencies": [],
        "status": "todo",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "Build SNP Database and Annotation Service",
        "description": "Curate a health-related SNP database and integrate with a public API like MyVariant.info to annotate the user's genetic variants.",
        "details": "Create an internal, curated list of approximately 50 well-studied health-related SNPs focusing on cardiovascular health, metabolism, drug response, and nutrition. This list should include gene name, rsID, and health trait. The service will then take the user's parsed SNPs, cross-reference them with this list, and query the MyVariant.info API for detailed annotations. Implement caching for API results and graceful error handling.",
        "testStrategy": "Unit test the database lookup to ensure it correctly identifies SNPs from the curated list. Mock API calls to MyVariant.info to test successful annotation retrieval, caching logic, and error handling for failed API requests. Verify that only rsIDs and relevant variant info are sent, not the entire raw file.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "todo",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "Develop LLM Explanation Engine",
        "description": "Integrate with the Claude API to translate complex genetic variant data into personalized, plain English health insights.",
        "details": "Create a module that sends the annotated variant information (not raw DNA) to the Claude API. The prompt should instruct the LLM to generate clear, easy-to-understand explanations about what the user's specific genotypes mean for various health traits. The output must include a prominent disclaimer that the information is not medical advice.",
        "testStrategy": "Create test cases with various annotated variant data payloads. Verify that the generated prompts are structured correctly. Review the LLM's output for clarity, accuracy, and the mandatory inclusion of the 'not medical advice' disclaimer. Test edge cases with no variants found or ambiguous data.",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "todo",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "End-to-End Integration and UI Scaffolding",
        "description": "Combine all components into a functional application and create a simple user interface for file upload and results display.",
        "details": "Integrate the DNA Parser, Annotation Service, and LLM Engine into a single, cohesive workflow. Develop a minimal UI that allows a user to select their local DNA file. Once processed, the UI should display the personalized health explanations generated by the LLM. Ensure all privacy and safety disclaimers are clearly visible to the user. The final tool must run end-to-end on sample data without errors.",
        "testStrategy": "Perform end-to-end testing using sample 23andMe and Ancestry files. Trace a single file from upload through parsing, annotation, LLM explanation, and final display. Verify that the displayed results are correct and understandable. Confirm the application successfully looks up 30+ variants from a typical user file.",
        "priority": "medium",
        "dependencies": [
          1,
          2,
          3
        ],
        "status": "todo",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-10-25T10:56:01.828Z",
      "updated": "2025-10-25T10:56:01.828Z",
      "description": "Tasks for master context"
    }
  }
}